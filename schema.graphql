# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

interface Connection {
    edges: [Edge]!
    pageInfo: PageInfo!
}

interface Edge {
    cursor: String!
    node: Node!
}

interface Node {
    id: ID!
}

type Category implements Node {
    createdAt: String!
    enable: Boolean!
    id: ID!
    name: String!
    pk: Int!
    updatedAt: String!
    user: User!
}

type CategoryConnection implements Connection {
    edges: [CategoryEdge]!
    pageInfo: PageInfo!
}

type CategoryEdge implements Edge {
    cursor: String!
    node: Category!
}

type ExpenseHistory {
    createdAt: String!
    expense: Int!
    id: ID!
    pk: Int!
    updatedAt: String!
    user: User!
}

type IncomeHistory {
    createdAt: String!
    id: ID!
    income: Int!
    pk: Int!
    updatedAt: String!
    user: User!
}

type Mutation {
    createCategory(input: NewCategory!): Category!
    createExpenseHistory(input: NewExpenseHistory!): ExpenseHistory!
    createIncomeHistory(input: NewIncomeHistory!): IncomeHistory!
    createPayment(input: NewPayment!): Payment!
    createUser(input: NewUser!): User!
    deleteCategory(input: DeleteCategory!): Category!
    updateCategory(input: UpdateCategory!): Category!
}

type PageInfo {
    endCursor: String!
    hasNextPage: Boolean!
}

type Payment {
    amount: Int!
    category: Category!
    createdAt: String!
    id: ID!
    numberOfProduct: Int!
    paidOn: String!
    pk: Int!
    product: Product!
    taxIncluded: Boolean!
    updatedAt: String!
    user: User!
}

type Product implements Node {
    createdAt: String!
    id: ID!
    name: String!
    pk: Int!
    updatedAt: String!
}

type ProductConnection implements Connection {
    edges: [ProductEdge]!
    pageInfo: PageInfo!
}

type ProductEdge implements Edge {
    cursor: String!
    node: Product!
}

type Query {
    categories(input: SearchCategories, page: PaginationInput!): CategoryConnection!
    category(id: ID!): Category
    expenseHistories: [ExpenseHistory!]!
    expenseHistory(id: ID!): ExpenseHistory
    incomeHistories(input: SearchIncomeHistory): [IncomeHistory!]!
    incomeHistory(id: ID!): IncomeHistory
    payment(id: ID!): Payment
    payments(input: SearchPayments): [Payment!]!
    product(id: ID!): Product
    products(input: SearchProduct, page: PaginationInput!): ProductConnection!
    user(id: ID!): User
    users: [User!]!
}

type User {
    createdAt: String!
    enable: Boolean!
    id: ID!
    name: String!
    pk: Int!
    updatedAt: String!
}

input DeleteCategory {
    id: ID!
    userId: ID!
}

input NewCategory {
    name: String!
    userId: ID!
}

input NewExpenseHistory {
    expense: Int!
    userId: ID!
}

input NewIncomeHistory {
    income: Int!
    userId: ID!
}

input NewPayment {
    amount: Int!
    categoryId: ID!
    numberOfProduct: Int!
    paidOn: String!
    productName: String!
    taxIncluded: Boolean!
    userId: ID!
}

input NewUser {
    name: String!
}

input PaginationInput {
    after: String
    first: Int
}

input SearchCategories {
    enable: Boolean
    name: String
    userId: ID!
}

input SearchIncomeHistory {
    beginningOfPeriod: String
    endOfPeriod: String
    userId: ID!
}

input SearchPayments {
    categoryId: ID
    productName: String
    userId: ID!
}

input SearchProduct {
    productName: String
    userId: ID!
}

input UpdateCategory {
    id: ID!
    name: String!
    userId: ID!
}
